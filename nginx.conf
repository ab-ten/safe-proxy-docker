load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

worker_processes 1;

events {
  worker_connections 1024;
}

http {
  include       mime.types;
  default_type  application/octet-stream;

  sendfile        on;
  keepalive_timeout  65;
  resolver 127.0.0.11 valid=30s;

  access_log /dev/stdout;
  error_log /dev/stderr;

  server {
    listen 80;

    location ~ ^/([^/]+)/ {
      set $target "";
      access_by_lua_block {
        local sqlite3 = require "lsqlite3"
        local db_path = os.getenv("PROXY_DB_FILE") or "/tmpfs/proxy.sqlite"
        local db = sqlite3.open(db_path)

        local server_name = ngx.var.uri:match("^/([^/]+)/")
        if not server_name then
          ngx.status = ngx.HTTP_UNAUTHORIZED
          ngx.say("Unauthorized: Invalid server name")
          ngx.exit(ngx.HTTP_UNAUTHORIZED)
        end

        local origin_query = string.format("SELECT origin FROM ORIGIN WHERE server_name = '%s'", server_name)
        local origin
        for row in db:nrows(origin_query) do
          origin = row.origin
        end

        if not origin then
          ngx.status = ngx.HTTP_UNAUTHORIZED
          ngx.say("Unauthorized: Server not found")
          ngx.exit(ngx.HTTP_UNAUTHORIZED)
        end

        local auth_header = ngx.req.get_headers()["Authorization"]
        if not auth_header or not auth_header:find("Bearer ") then
          ngx.status = ngx.HTTP_UNAUTHORIZED
          ngx.say("Unauthorized: Missing or invalid Authorization header")
          ngx.exit(ngx.HTTP_UNAUTHORIZED)
        end

        local dummy_key = auth_header:sub(8)
        local key_query = string.format("SELECT plain_real_api_key FROM KEY_MAPPING WHERE server_name = '%s' AND client_dummy_key = '%s'", server_name, dummy_key)
        local real_key
        for row in db:nrows(key_query) do
          real_key = row.plain_real_api_key
        end

        if not real_key then
          ngx.status = ngx.HTTP_UNAUTHORIZED
          ngx.say("Unauthorized: Invalid API key")
          ngx.exit(ngx.HTTP_UNAUTHORIZED)
        end

        ngx.req.set_header("Authorization", "Bearer " .. real_key)

        local host = ngx.re.match(origin, [[https?://([^/]+)]])[1]
        ngx.req.set_header("Host", host)
        ngx.var.target = origin .. ngx.var.uri:sub(#server_name + 2)
      }

      proxy_pass $target;
      proxy_ssl_protocols TLSv1.2 TLSv1.3;
      proxy_ssl_server_name on;
      proxy_ssl_name $host;
    }
  }
}
